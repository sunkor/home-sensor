function makeValidator(parser) {
  return function(opts = {}) {
    const hasDefault = Object.prototype.hasOwnProperty.call(opts, 'default');
    const optional = opts.optional || false;
    const def = opts.default;
    return {
      _hasDefault: hasDefault,
      _optional: optional,
      _parse(value, key) {
        if (value === undefined || value === null || value === '') {
          if (hasDefault) return def;
          if (optional) return undefined;
          throw new Error(`Missing environment variable: ${key}`);
        }
        return parser(value, key);
      }
    };
  };
}

const str = makeValidator(v => String(v));
const num = makeValidator(v => {
  const n = Number(v);
  if (!Number.isFinite(n)) {
    throw new Error(`Expected a number for ${v}`);
  }
  return n;
});
const bool = makeValidator(v => {
  if (v === true || v === 'true' || v === '1') return true;
  if (v === false || v === 'false' || v === '0') return false;
  throw new Error(`Expected a boolean for ${v}`);
});

function cleanEnv(env, specs) {
  const result = {};
  for (const key of Object.keys(specs)) {
    const spec = specs[key];
    result[key] = spec._parse(env[key], key);
  }
  return result;
}

module.exports = { cleanEnv, str, num, bool };
